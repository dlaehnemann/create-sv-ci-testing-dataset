# Main entrypoint of the workflow.
# Please follow the best practices:
# https://snakemake.readthedocs.io/en/stable/snakefiles/best_practices.html,
# in particular regarding the standardized folder structure mentioned there.
import pandas as pd
from os import path


configfile: "config/config.yaml"

# construct genome name
datatype = "dna"
species = config["ref"]["species"]
build = config["ref"]["build"]
release = config["ref"]["release"]
genome_name = f"genome.{datatype}.{species}.{build}.{release}"
genome = f"resources/{genome_name}.fasta"

include: "rules/ref.smk"
include: "rules/download.smk"
include: "rules/trim.smk"
include: "rules/mapping.smk"
include: "rules/downsampling.smk"
include: "rules/contaminate.smk"


rule all:
    input:
        "results/samples.tsv",
        "results/units.tsv",

rule create_sample_sheet:
    input:
        tumor_samples=expand(
            "results/contaminated/{tumor_sample}.{chr}.{total_depth}x.{contamination}_percent_{normal_sample}_contamination.bam",
            tumor_sample=config["pure_tumor_sample"]["sample_name"],
            chr=config.get("chromosome_to_extract", "full_genome"),
            total_depth=config["target_coverages"],
            contamination=config["target_normal_contaminations_percent"],
            normal_sample=config["pure_normal_sample"]["sample_name"],
        ),
        normal_samples=expand(
            "results/downsampled/{normal_sample}.{chr}.{depth}x.bam",
            normal_sample=config["pure_normal_sample"]["sample_name"],
            chr=config.get("chromosome_to_extract", "full_genome"),
            depth=config["target_coverages"],
        ),
    output:
        samples="results/samples.tsv",
        units="results/units.tsv",
    log:
        "logs/samples.tsv.log",
    run:
        with open(output.samples) as s_out, open(output.units) as u_out:
            s_out.write(
                "\t".join([
                    "sample_name",
                    "group",
                    "alias",
                    "expected_contamination",
                    "depth",
                ])
            )
            u_out.write(
                "\t".join([
                    "sample_name",
                    "unit_name",
                ])
            )
            for t in input.tumor_samples:
                sample_name = path.splitext(path.basename(t))[0]
                [tumor_sample, chrom, depth_string, contam_string] = path.basename(t).split(".")
                depth = depth_string.rstrip("x")
                [ contamination, _, normal_sample, _ ] = contam_string.split("_")
                normal_name = ".".join([normal_sample, chrom, depth_string])
                s_out.write(
                    "\t".join([
                        sample_name,
                        sample_name,
                        "tumor",
                        contamination,
                        depth,
                    ])
                )
                u_out.write(
                    "\t".join([
                        sample_name,
                        "u1",
                    ])
                )
                s_out.write(
                    "\t".join([
                        normal_name,
                        sample_name,
                        "normal",
                        "",
                        depth,
                    ])
                )
                u_out.write(
                    "\t".join(
                        normal_name,
                        "u1",
                    )

                )


wildcard_constraints:
    sample=f"{config['pure_tumor_sample']['sample_name']}|{config['pure_normal_sample']['sample_name']}",
    chr="|".join(["full_genome", config["ref"].get("chromosome", "")]),
